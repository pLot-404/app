{"version":3,"file":"bundle.js","mappings":"mBAYA,iBAiBE,WAAYA,EAAaC,G,WAAb,IAAAD,IAAAA,EAAA,UAAa,IAAAC,IAAAA,EAAA,KAEvBC,KAAKC,OAASC,SAASC,cAAc,UACrC,IAAMC,EAAOF,SAASG,eAAe,QACjCD,GAAMA,EAAKE,YAAYN,KAAKC,QAGhC,EAA0C,CAACH,EAAOC,GAAjDC,KAAKC,OAAOH,MAAK,KAAEE,KAAKC,OAAOF,OAAM,KAGtCC,KAAKO,OAAS,GACdP,KAAKQ,QAAU,KAGfR,KAAKS,OAAS,GAmElB,OAhEE,YAAAC,OAAA,SAAOZ,EAAaC,G,WAAb,IAAAD,IAAAA,EAAA,UAAa,IAAAC,IAAAA,EAAA,KAElB,EAA0C,CAACD,EAAOC,GAAjDC,KAAKC,OAAOH,MAAK,KAAEE,KAAKC,OAAOF,OAAM,MAGxC,YAAAY,MAAA,eClDAC,EAEAC,EAMMC,ED0CN,OACEd,KAAKQ,QAAUR,KAAKQ,SAAWR,KAAKO,OAAO,IAAM,KAGjDP,KAAKe,WCtDPH,EDyDqBI,OCvDrBH,EDuD8C,SAACI,GAE3C,IAAK,IAAMC,KADXD,EAAEE,iBACc,EAAKV,OACnB,GAAI,EAAKA,QAAUW,OAAOC,UAAUC,eAAeC,KAAK,EAAKd,OAAQS,GACnE,OAAQD,EAAEO,MACR,IAAK,WAC0C,IAAzC,EAAKf,OAAOS,GAAGO,KAAKC,QAAQT,EAAEQ,QAChC,EAAKhB,OAAOS,GAAGS,MAAO,GAExB,MACF,IAAK,SAC0C,IAAzC,EAAKlB,OAAOS,GAAGO,KAAKC,QAAQT,EAAEQ,QAChC,EAAKhB,OAAOS,GAAGS,MAAO,GAExB,MAEF,QACE,SClENb,EAASF,EDiDc,gBChDHgB,MAAM,KACzBC,SAAQ,SAACC,GAAkB,OAAAhB,EAAOiB,iBAAiBD,EAAOjB,GAAU,ODsE3E,YAAAE,SAAA,WAEE,IAAMiB,EAAMhC,KAAKC,OAAOgC,WAAW,MACnCD,EAAIE,UAAY,OAChBF,EAAIG,SAAS,EAAG,EAAGnC,KAAKC,OAAOH,MAAOE,KAAKC,OAAOF,QAElDC,KAAKQ,QAAQ4B,SAGb,IAAK,IAAIlB,EAAI,EAAGA,EAAIlB,KAAKQ,QAAQ6B,KAAKC,OAAQpB,IAC5ClB,KAAKQ,QAAQ6B,KAAKnB,GAAGkB,OAAOpC,KAAKC,QAInCsC,sBAAsBvC,KAAKe,SAASyB,KAAKxC,QAG3C,YAAAyC,IAAA,SAAIC,GAEF1C,KAAKO,OAASP,KAAKO,OAAOoC,OAAO,CAACD,KAGpC,YAAAE,WAAA,SAAWC,EAAcC,GAEvB9C,KAAKS,OAAOoC,GAAQ,CAClBpB,KAAMqB,EACNnB,MAAM,IAGZ,EAlGA,GAoGA,UEnDA,EA7DA,WAIE,WACEoB,EACOC,EACAC,EACAnD,EACAC,EACAmD,QAJA,IAAAF,IAAAA,EAAA,QACA,IAAAC,IAAAA,EAAA,QACA,IAAAnD,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,SACA,IAAAmD,IAAAA,EAAA,GAJA,KAAAF,EAAAA,EACA,KAAAC,EAAAA,EACA,KAAAnD,MAAAA,EACA,KAAAC,OAAAA,EACA,KAAAmD,MAAAA,EAGPlD,KAAK+C,IAAM,IAAII,MACfnD,KAAK+C,IAAIK,IAAML,EA6CnB,OA1CE,YAAAX,OAAA,SAAOnC,GAELD,KAAKqD,OAAOpD,GAEZD,KAAKsD,gBAGP,YAAAD,OAAA,SAAOpD,GACL,KACED,KAAKgD,GAAK,EAAIhD,KAAKF,OACnBE,KAAKgD,EAAI/C,EAAOH,OAChBE,KAAKiD,GAAK,EAAIjD,KAAKD,QACnBC,KAAKiD,EAAIhD,EAAOF,QAJlB,CAWA,IAAMiC,EAAM/B,EAAOgC,WAAW,MAGxBsB,EAASvD,KAAKkD,OAASlD,KAAK+C,IAAIjD,MAAQE,KAAKF,OAC7C0D,EAASC,KAAKC,MAAM1D,KAAKkD,OAASlD,KAAK+C,IAAIjD,MAAQE,KAAKF,QAG9DkC,EAAI2B,UACF3D,KAAK+C,IACL/C,KAAKF,MAAQyD,EACbvD,KAAKD,OAASyD,EACdxD,KAAKF,MACLE,KAAKD,OACLC,KAAKgD,EACLhD,KAAKiD,EACLjD,KAAKF,MACLE,KAAKD,UAIT,YAAAuD,aAAA,aAGF,EA3DA,GCyBA,EAvBA,WAIE,aACEtD,KAAKqC,KAAO,GAgBhB,OAbE,YAAAI,IAAA,SAAImB,GACF5D,KAAKqC,KAAOrC,KAAKqC,KAAKM,OAAO,CAACiB,KAGhC,YAAAxB,OAAA,WACEpC,KAAKsD,gBAGP,YAAAA,aAAA,aAKF,EArBA,GCIA,IAAMR,EAAQ,CACZe,GAAI,CAAC,OAAQ,UAAW,WACxBC,KAAM,CAAC,OAAQ,UAAW,aAC1BC,MAAO,CAAC,OAAQ,UAAW,cAC3BC,KAAM,CAAC,OAAQ,UAAW,aAC1BC,QAAS,CAAC,QAAS,QACnBC,QAAS,CAAC,SAAU,SAOtBlD,OAAOe,iBAAiB,QAAQ,WAE9B,IAAMoC,EAAO,IAAI,EAAyB,IAApBnD,OAAOoD,WAAwC,IAArBpD,OAAOqD,aAGvD,IAAK,IAAMnD,KAAK4B,EACVA,GAAS1B,OAAOC,UAAUC,eAAeC,KAAKuB,EAAO5B,IACvDiD,EAAKvB,WAAW1B,EAAG4B,EAAM5B,IAK7BF,OAAOe,iBAAiB,UAAU,WAChCoC,EAAKzD,OAA2B,IAApBM,OAAOoD,WAAwC,IAArBpD,OAAOqD,gBAI/C,IAAM3B,EAAQ,IAAI,EAGZ4B,EAAS,IAAI,EAAO,0BAE1B5B,EAAMD,IAAI6B,GAGV5B,EAAMY,aAAe,WACfa,EAAK1D,OAAOoD,GAAGlC,OAAM2C,EAAOrB,GA7BlB,GA8BVkB,EAAK1D,OAAOqD,KAAKnC,OAAM2C,EAAOrB,GA9BpB,GA+BVkB,EAAK1D,OAAOsD,MAAMpC,OAAM2C,EAAOtB,GA/BrB,GAgCVmB,EAAK1D,OAAOuD,KAAKrC,OAAM2C,EAAOtB,GAhCpB,IAmChBmB,EAAK1B,IAAIC,GAGTyB,EAAKxD,Y","sources":["webpack://app/./src/modules/Game.ts","webpack://app/./src/modules/MultiEventListener.ts","webpack://app/./src/modules/Sprite.ts","webpack://app/./src/modules/Scene.ts","webpack://app/./src/App.ts"],"sourcesContent":["import Scene from './Scene';\nimport MultiEventListener from './MultiEventListener';\n\n// keyMap用の型定義\ninterface key {\n  [index: string]: {\n    // 作用のエイリアス名\n    code: string[]; // 作用を起こすキーのe.code一覧\n    push: boolean; // キーのいずれかが押されているかの判定\n  };\n}\n\nclass Game {\n  /**\nゲームエンジン全体の制御\n*/\n\n  public canvas: HTMLCanvasElement;\n  /** ゲームを表示するキャンバス */\n\n  public keyMap: key;\n  /** キーボードと動作の対応 */\n\n  public scenes: Scene[];\n  /** ゲームに登場するシーンの一覧 */\n\n  public current: Scene | null;\n  /** 現在のシーン */\n\n  constructor(width = 320, height = 600) {\n    // キャンバスの生成とrootへの追加\n    this.canvas = document.createElement('canvas');\n    const root = document.getElementById('root');\n    if (root) root.appendChild(this.canvas);\n\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n\n    // シーンの初期化\n    this.scenes = [];\n    this.current = null;\n\n    // キーマップの初期化\n    this.keyMap = {};\n  }\n\n  resize(width = 320, height = 600) {\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n  }\n\n  start() {\n    this.current = this.current || this.scenes[0] || null;\n\n    // メインループ\n    this.mainloop();\n\n    // キーが押される・離されるときにkeyMapのフラグを変化\n    MultiEventListener(window, 'keydown keyup', (e: KeyboardEvent): void => {\n      e.preventDefault();\n      for (const i in this.keyMap) {\n        if (this.keyMap && Object.prototype.hasOwnProperty.call(this.keyMap, i))\n          switch (e.type) {\n            case 'keydown':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = true;\n              }\n              break;\n            case 'keyup':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = false;\n              }\n              break;\n\n            default:\n              return;\n          }\n      }\n    });\n  }\n\n  mainloop() {\n    // コンテキストを取得して塗りつぶす\n    const ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.fillStyle = '#000';\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.current.update();\n\n    // 現シーンのすべてのオブジェクトを再絵画\n    for (let i = 0; i < this.current.objs.length; i++) {\n      this.current.objs[i].update(this.canvas);\n    }\n\n    // ループ\n    requestAnimationFrame(this.mainloop.bind(this));\n  }\n\n  add(scene: Scene) {\n    // シーンを追加\n    this.scenes = this.scenes.concat([scene]);\n  }\n\n  setKeyBind(name: string, codes: string[]) {\n    // キーマップを登録\n    this.keyMap[name] = {\n      code: codes,\n      push: false,\n    };\n  }\n}\n\nexport default Game;\n","const MultiEventListener = (\n  element: Element | null | Window,\n  eventNames: string,\n  listener: (e: KeyboardEvent) => void,\n): void => {\n  /*\n  elementに、半角スペースで区切られたeventNamesそれぞれに対し同じイベントリスナを登録する\n  */\n\n  const target = element as EventTarget;\n  const events = eventNames.split(' ');\n  events.forEach((event: string) => target.addEventListener(event, listener, false));\n};\n\nexport default MultiEventListener;\n","class Sprite {\n  img: HTMLImageElement;\n  /* 表示する画像 */\n\n  constructor(\n    img: string,\n    public x: number = 0, // 初期絵画位置x\n    public y: number = 0, // 初期絵画位置y\n    public width: number = 48, // 絵画サイズ幅\n    public height: number = 48, // 絵画サイズ高さ\n    public index: number = 0, // 左上から数えたタイルの番号\n  ) {\n    // 画像の初期化\n    this.img = new Image();\n    this.img.src = img;\n  }\n\n  update(canvas: HTMLCanvasElement) {\n    // レンダーを呼び出す\n    this.render(canvas);\n    // イベントハンドラを呼び出す\n    this.eventHandler();\n  }\n\n  render(canvas: HTMLCanvasElement) {\n    if (\n      this.x < -1 * this.width ||\n      this.x > canvas.width ||\n      this.y < -1 * this.height ||\n      this.y > canvas.height\n    ) {\n      // キャンバスの外にオブジェクトがあるなら絵画しない\n      return;\n    }\n\n    // コンテキストを取得\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n    // 絵画するタイルの縦横の番号を求める\n    const xIndex = this.index % (this.img.width / this.width);\n    const yIndex = Math.floor(this.index / (this.img.width / this.width));\n\n    // 絵画する\n    ctx.drawImage(\n      this.img,\n      this.width * xIndex,\n      this.height * yIndex,\n      this.width,\n      this.height,\n      this.x,\n      this.y,\n      this.width,\n      this.height,\n    );\n  }\n\n  eventHandler() {\n    /* オーバーライドする */\n  }\n}\n\nexport default Sprite;\n","import Sprite from './Sprite';\n\nclass Scene {\n  objs: Sprite[];\n  /** そのシーンに入っているオブジェクト一覧 */\n\n  constructor() {\n    this.objs = [];\n  }\n\n  add(obj: Sprite) {\n    this.objs = this.objs.concat([obj]);\n  }\n\n  update() {\n    this.eventHandler();\n  }\n\n  eventHandler() {\n    /**\n     * オーバーライドする\n     */\n  }\n}\n\nexport default Scene;\n","import Game from './modules/Game';\nimport Sprite from './modules/Sprite';\nimport Scene from './modules/Scene';\nimport './css/Style.scss';\n\n// キーバインドをe.codeで定義\nconst codes = {\n  up: ['KeyW', 'Numpad8', 'ArrowUp'], // w,テンキー8,↑\n  down: ['KeyS', 'Numpad2', 'ArrowDown'], // s,テンキー2,↓\n  right: ['KeyD', 'Numpad6', 'ArrowRight'], // d,テンキー6,→\n  left: ['KeyA', 'Numpad4', 'ArrowLeft'], // a,テンキー4,←\n  confirm: ['Enter', 'KeyZ'], // Enter,z\n  discard: ['Escape', 'KeyX'], // Esc,x\n};\n\n// 移動速度の定義\nconst walkSpeed = 4;\n// const runSpeed = 8;\n\nwindow.addEventListener('load', () => {\n  // 画面サイズの95%で初期化\n  const game = new Game(window.innerWidth * 0.95, window.innerHeight * 0.95);\n\n  // codesの全てのキーを呼び出し登録する\n  for (const i in codes) {\n    if (codes && Object.prototype.hasOwnProperty.call(codes, i)) {\n      game.setKeyBind(i, codes[i]);\n    }\n  }\n\n  // 画面サイズが変更されたらスクリーンサイズを変更\n  window.addEventListener('resize', () => {\n    game.resize(window.innerWidth * 0.95, window.innerHeight * 0.95);\n  });\n\n  // シーン生成\n  const scene = new Scene();\n\n  // スプライト生成・追加\n  const school = new Sprite('./img/schoolinside.png');\n\n  scene.add(school);\n\n  // イベントハンドラのオーバーライド\n  scene.eventHandler = () => {\n    if (game.keyMap.up.push) school.y -= walkSpeed;\n    if (game.keyMap.down.push) school.y += walkSpeed;\n    if (game.keyMap.right.push) school.x += walkSpeed;\n    if (game.keyMap.left.push) school.x -= walkSpeed;\n  };\n\n  game.add(scene);\n\n  // ゲームを開始する\n  game.start();\n});\n"],"names":["width","height","this","canvas","document","createElement","root","getElementById","appendChild","scenes","current","keyMap","resize","start","element","listener","target","mainloop","window","e","i","preventDefault","Object","prototype","hasOwnProperty","call","type","code","indexOf","push","split","forEach","event","addEventListener","ctx","getContext","fillStyle","fillRect","update","objs","length","requestAnimationFrame","bind","add","scene","concat","setKeyBind","name","codes","img","x","y","index","Image","src","render","eventHandler","xIndex","yIndex","Math","floor","drawImage","obj","up","down","right","left","confirm","discard","game","innerWidth","innerHeight","school"],"sourceRoot":""}