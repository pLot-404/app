{"version":3,"file":"bundle.js","mappings":"yBAYA,iBAiBE,WAAYA,EAAaC,G,WAAb,IAAAD,IAAAA,EAAA,UAAa,IAAAC,IAAAA,EAAA,KAEvBC,KAAKC,OAASC,SAASC,cAAc,UACrC,IAAMC,EAAOF,SAASG,eAAe,QACjCD,GAAMA,EAAKE,YAAYN,KAAKC,QAGhC,EAA0C,CAACH,EAAOC,GAAjDC,KAAKC,OAAOH,MAAK,KAAEE,KAAKC,OAAOF,OAAM,KAGtCC,KAAKO,OAAS,GACdP,KAAKQ,QAAU,KAGfR,KAAKS,OAAS,GAmElB,OAhEE,YAAAC,OAAA,SAAOZ,EAAaC,G,WAAb,IAAAD,IAAAA,EAAA,UAAa,IAAAC,IAAAA,EAAA,KAElB,EAA0C,CAACD,EAAOC,GAAjDC,KAAKC,OAAOH,MAAK,KAAEE,KAAKC,OAAOF,OAAM,MAGxC,YAAAY,MAAA,eClDAC,EAEAC,EAMMC,ED0CN,OACEd,KAAKQ,QAAUR,KAAKQ,SAAWR,KAAKO,OAAO,IAAM,KAGjDP,KAAKe,WCtDPH,EDyDqBI,OCvDrBH,EDuD8C,SAACI,GAE3C,IAAK,IAAMC,KADXD,EAAEE,iBACc,EAAKV,OACnB,GAAI,EAAKA,QAAUW,OAAOC,UAAUC,eAAeC,KAAK,EAAKd,OAAQS,GACnE,OAAQD,EAAEO,MACR,IAAK,WAC0C,IAAzC,EAAKf,OAAOS,GAAGO,KAAKC,QAAQT,EAAEQ,QAChC,EAAKhB,OAAOS,GAAGS,MAAO,GAExB,MACF,IAAK,SAC0C,IAAzC,EAAKlB,OAAOS,GAAGO,KAAKC,QAAQT,EAAEQ,QAChC,EAAKhB,OAAOS,GAAGS,MAAO,GAExB,MAEF,QACE,SClENb,EAASF,EDiDc,gBChDHgB,MAAM,KACzBC,SAAQ,SAACC,GAAkB,OAAAhB,EAAOiB,iBAAiBD,EAAOjB,GAAU,ODsE3E,YAAAE,SAAA,WAEE,IAAMiB,EAAMhC,KAAKC,OAAOgC,WAAW,MACnCD,EAAIE,UAAY,OAChBF,EAAIG,SAAS,EAAG,EAAGnC,KAAKC,OAAOH,MAAOE,KAAKC,OAAOF,QAElDC,KAAKQ,QAAQ4B,SAGb,IAAK,IAAIlB,EAAI,EAAGA,EAAIlB,KAAKQ,QAAQ6B,KAAKC,OAAQpB,IAC5ClB,KAAKQ,QAAQ6B,KAAKnB,GAAGkB,OAAOpC,KAAKC,QAInCsC,sBAAsBvC,KAAKe,SAASyB,KAAKxC,QAG3C,YAAAyC,IAAA,SAAIC,GAEF1C,KAAKO,OAASP,KAAKO,OAAOoC,OAAO,CAACD,KAGpC,YAAAE,WAAA,SAAWC,EAAcC,GAEvB9C,KAAKS,OAAOoC,GAAQ,CAClBpB,KAAMqB,EACNnB,MAAM,IAGZ,EAlGA,GAoGA,U,EEhHA,WAaE,WAAYoB,EAAoBC,G,WAAA,IAAAA,IAAAA,EAAA,SAAAA,KAAAA,EAC9BhD,KAAK+C,IAAM,IAAIE,MACfjD,KAAK+C,IAAIG,IAAMH,EAEf,EAAmB,CAAC,EAAG,GAAtB/C,KAAKmD,EAAC,KAAEnD,KAAKoD,EAAC,KAEfpD,KAAKqD,KAAO,GA2ChB,OAxCE,YAAAjB,OAAA,SAAOnC,GACLD,KAAKsD,OAAOrD,IAGd,YAAAqD,OAAA,SAAOrD,GACL,IAAK,IAAIiB,EAAI,EAAGA,EAAIlB,KAAKqD,KAAKf,OAAQpB,IAAK,CAEzC,IAAMkC,EAAIpD,KAAKoD,EAAIpD,KAAKgD,KAAO9B,EAE/B,KAAIkC,GAAK,EAAIpD,KAAKgD,MAAQI,EAAInD,EAAOF,QAErC,IAAK,IAAIwD,EAAI,EAAGA,EAAIvD,KAAKqD,KAAKnC,GAAGoB,OAAQiB,IAAK,CAC5C,IAAMJ,EAAInD,KAAKmD,EAAInD,KAAKgD,KAAOO,EAC/B,KAAIJ,GAAK,EAAInD,KAAKgD,MAAQG,EAAIlD,EAAOH,OAArC,CAEA,IAAM0D,EAASxD,KAAKqD,KAAKnC,GAAGqC,IAAMvD,KAAK+C,IAAIjD,MAAQE,KAAKgD,MAClDS,EAASC,KAAKC,MAAM3D,KAAKqD,KAAKnC,GAAGqC,IAAMvD,KAAK+C,IAAIjD,MAAQE,KAAKgD,OAEvD/C,EAAOgC,WAAW,MAE1B2B,UACF5D,KAAK+C,IACL/C,KAAKgD,KAAOQ,EACZxD,KAAKgD,KAAOS,EACZzD,KAAKgD,KACLhD,KAAKgD,KACLG,EACAC,EACApD,KAAKgD,KACLhD,KAAKgD,UAMb,YAAAa,aAAA,aAKF,EA9DA,GCAA,I,EAAA,aAIE,WACEd,EACOjD,EACAC,EACA+D,EACAX,EACAC,QAJA,IAAAtD,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,SACA,IAAA+D,IAAAA,EAAA,QACA,IAAAX,IAAAA,EAAA,QACA,IAAAC,IAAAA,EAAA,GAJA,KAAAtD,MAAAA,EACA,KAAAC,OAAAA,EACA,KAAA+D,MAAAA,EACA,KAAAX,EAAAA,EACA,KAAAC,EAAAA,EAGPpD,KAAK+C,IAAM,IAAIE,MACfjD,KAAK+C,IAAIG,IAAMH,EA6CnB,OA1CE,YAAAX,OAAA,SAAOnC,GAELD,KAAKsD,OAAOrD,GAEZD,KAAK6D,gBAGP,YAAAP,OAAA,SAAOrD,GACL,KACED,KAAKmD,GAAK,EAAInD,KAAKF,OACnBE,KAAKmD,EAAIlD,EAAOH,OAChBE,KAAKoD,GAAK,EAAIpD,KAAKD,QACnBC,KAAKoD,EAAInD,EAAOF,QAJlB,CAWA,IAAMiC,EAAM/B,EAAOgC,WAAW,MAGxBuB,EAASxD,KAAK8D,OAAS9D,KAAK+C,IAAIjD,MAAQE,KAAKF,OAC7C2D,EAASC,KAAKC,MAAM3D,KAAK8D,OAAS9D,KAAK+C,IAAIjD,MAAQE,KAAKF,QAG9DkC,EAAI4B,UACF5D,KAAK+C,IACL/C,KAAKF,MAAQ0D,EACbxD,KAAKD,OAAS0D,EACdzD,KAAKF,MACLE,KAAKD,OACLC,KAAKmD,EACLnD,KAAKoD,EACLpD,KAAKF,MACLE,KAAKD,UAIT,YAAA8D,aAAA,aAGF,EA3DA,G,2cCEA,YACE,WAAYd,EAAYC,QAAA,IAAAA,IAAAA,EAAA,IAAxB,MACE,YAAMD,EAAKC,EAAMA,IAAK,K,OADA,EAAAA,KAAAA,E,EAG1B,OAJkC,OAIlC,EAJA,CD2DA,GElCA,EAvBA,WAIE,aACEhD,KAAKqC,KAAO,GAgBhB,OAbE,YAAAI,IAAA,SAAIsB,GACF/D,KAAKqC,KAAOrC,KAAKqC,KAAKM,OAAO,CAACoB,KAGhC,YAAA3B,OAAA,WACEpC,KAAK6D,gBAGP,YAAAA,aAAA,aAKF,EArBA,G,gghBCIA,IAAMf,EAAQ,CACZkB,GAAI,CAAC,OAAQ,UAAW,WACxBC,KAAM,CAAC,OAAQ,UAAW,aAC1BC,MAAO,CAAC,OAAQ,UAAW,cAC3BC,KAAM,CAAC,OAAQ,UAAW,aAC1BC,QAAS,CAAC,QAAS,QACnBC,QAAS,CAAC,SAAU,SAOhBC,EAAY,IACZC,EAAa,IAEnBvD,OAAOe,iBAAiB,QAAQ,WAE9B,IAAMyC,EAAO,IAAI,EAAyB,IAApBxD,OAAOyD,WAAwC,IAArBzD,OAAO0D,aAGvD,IAAK,IAAMxD,KAAK4B,EACVA,GAAS1B,OAAOC,UAAUC,eAAeC,KAAKuB,EAAO5B,IACvDsD,EAAK5B,WAAW1B,EAAG4B,EAAM5B,IAK7BF,OAAOe,iBAAiB,UAAU,WAChCyC,EAAK9D,OAA2B,IAApBM,OAAOyD,WAAwC,IAArBzD,OAAO0D,gBAI/C,IAAMhC,EAAQ,IAAI,EAGZiB,EAAQ,IAAI,EAAI,oBACtBA,EAAMN,KAAOiB,EACb5B,EAAMD,IAAIkB,GAEV,IAAMgB,EAAU,IAAI,EAAI,qBACxBA,EAAQtB,KAAOkB,EACf7B,EAAMD,IAAIkC,GAGV,IAAMC,EAAS,IAAI,EAAK,sBAExBlC,EAAMD,IAAImC,GAGVlC,EAAMmB,aAAe,WACfW,EAAK/D,OAAOuD,GAAGrC,OAAMiD,EAAOxB,GAzClB,GA0CVoB,EAAK/D,OAAOwD,KAAKtC,OAAMiD,EAAOxB,GA1CpB,GA2CVoB,EAAK/D,OAAOyD,MAAMvC,OAAMiD,EAAOzB,GA3CrB,GA4CVqB,EAAK/D,OAAO0D,KAAKxC,OAAMiD,EAAOzB,GA5CpB,IA+ChBqB,EAAK/B,IAAIC,GAGT8B,EAAK7D,YChEPkE,I","sources":["webpack://app/./src/modules/Game.ts","webpack://app/./src/modules/MultiEventListener.ts","webpack://app/./src/modules/Map.ts","webpack://app/./src/modules/Sprite.ts","webpack://app/./src/modules/Tile.ts","webpack://app/./src/modules/Scene.ts","webpack://app/./src/App.ts","webpack://app/webpack/startup"],"sourcesContent":["import Scene from './Scene';\nimport MultiEventListener from './MultiEventListener';\n\n// keyMap用の型定義\ninterface key {\n  [index: string]: {\n    // 作用のエイリアス名\n    code: string[]; // 作用を起こすキーのe.code一覧\n    push: boolean; // キーのいずれかが押されているかの判定\n  };\n}\n\nclass Game {\n  /**\nゲームエンジン全体の制御\n*/\n\n  public canvas: HTMLCanvasElement;\n  /** ゲームを表示するキャンバス */\n\n  public keyMap: key;\n  /** キーボードと動作の対応 */\n\n  public scenes: Scene[];\n  /** ゲームに登場するシーンの一覧 */\n\n  public current: Scene | null;\n  /** 現在のシーン */\n\n  constructor(width = 320, height = 600) {\n    // キャンバスの生成とrootへの追加\n    this.canvas = document.createElement('canvas');\n    const root = document.getElementById('root');\n    if (root) root.appendChild(this.canvas);\n\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n\n    // シーンの初期化\n    this.scenes = [];\n    this.current = null;\n\n    // キーマップの初期化\n    this.keyMap = {};\n  }\n\n  resize(width = 320, height = 600) {\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n  }\n\n  start() {\n    this.current = this.current || this.scenes[0] || null;\n\n    // メインループ\n    this.mainloop();\n\n    // キーが押される・離されるときにkeyMapのフラグを変化\n    MultiEventListener(window, 'keydown keyup', (e: KeyboardEvent): void => {\n      e.preventDefault();\n      for (const i in this.keyMap) {\n        if (this.keyMap && Object.prototype.hasOwnProperty.call(this.keyMap, i))\n          switch (e.type) {\n            case 'keydown':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = true;\n              }\n              break;\n            case 'keyup':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = false;\n              }\n              break;\n\n            default:\n              return;\n          }\n      }\n    });\n  }\n\n  mainloop() {\n    // コンテキストを取得して塗りつぶす\n    const ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.fillStyle = '#000';\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.current.update();\n\n    // 現シーンのすべてのオブジェクトを再絵画\n    for (let i = 0; i < this.current.objs.length; i++) {\n      this.current.objs[i].update(this.canvas);\n    }\n\n    // ループ\n    requestAnimationFrame(this.mainloop.bind(this));\n  }\n\n  add(scene: Scene) {\n    // シーンを追加\n    this.scenes = this.scenes.concat([scene]);\n  }\n\n  setKeyBind(name: string, codes: string[]) {\n    // キーマップを登録\n    this.keyMap[name] = {\n      code: codes,\n      push: false,\n    };\n  }\n}\n\nexport default Game;\n","const MultiEventListener = (\n  element: Element | null | Window,\n  eventNames: string,\n  listener: (e: KeyboardEvent) => void,\n): void => {\n  /*\n  elementに、半角スペースで区切られたeventNamesそれぞれに対し同じイベントリスナを登録する\n  */\n\n  const target = element as EventTarget;\n  const events = eventNames.split(' ');\n  events.forEach((event: string) => target.addEventListener(event, listener, false));\n};\n\nexport default MultiEventListener;\n","export default class Map {\n  img: HTMLImageElement;\n  /** 絵画する画像 */\n\n  x: number;\n  /** 画像の座標 */\n\n  y: number;\n  /** 画像の座標 */\n\n  data: number[][];\n  /** マップデータの二次元配列 */\n\n  constructor(img: string, public size: number = 48) {\n    this.img = new Image();\n    this.img.src = img;\n\n    [this.x, this.y] = [0, 0];\n\n    this.data = [];\n  }\n\n  update(canvas: HTMLCanvasElement) {\n    this.render(canvas);\n  }\n\n  render(canvas: HTMLCanvasElement) {\n    for (let i = 0; i < this.data.length; i++) {\n      // タイルの絵画位置\n      const y = this.y + this.size * i;\n      // タイルの位置が画面の外なら飛ばす\n      if (y < -1 * this.size || y > canvas.height) continue;\n\n      for (let j = 0; j < this.data[i].length; j++) {\n        const x = this.x + this.size * j;\n        if (x < -1 * this.size || x > canvas.width) continue;\n\n        const xIndex = this.data[i][j] % (this.img.width / this.size);\n        const yIndex = Math.floor(this.data[i][j] / (this.img.width / this.size));\n\n        const ctx = canvas.getContext('2d');\n\n        ctx.drawImage(\n          this.img,\n          this.size * xIndex,\n          this.size * yIndex,\n          this.size,\n          this.size,\n          x,\n          y,\n          this.size,\n          this.size,\n        );\n      }\n    }\n  }\n\n  eventHandler() {\n    /**\n     * オーバーライドする\n     */\n  }\n}\n","class Sprite {\n  img: HTMLImageElement;\n  /* 表示する画像 */\n\n  constructor(\n    img: string,\n    public width: number = 48, // 絵画サイズ幅\n    public height: number = 48, // 絵画サイズ高さ\n    public index: number = 0, // 左上から数えたタイルの番号\n    public x: number = 0, // 初期絵画位置x\n    public y: number = 0, // 初期絵画位置y\n  ) {\n    // 画像の初期化\n    this.img = new Image();\n    this.img.src = img;\n  }\n\n  update(canvas: HTMLCanvasElement) {\n    // レンダーを呼び出す\n    this.render(canvas);\n    // イベントハンドラを呼び出す\n    this.eventHandler();\n  }\n\n  render(canvas: HTMLCanvasElement) {\n    if (\n      this.x < -1 * this.width ||\n      this.x > canvas.width ||\n      this.y < -1 * this.height ||\n      this.y > canvas.height\n    ) {\n      // キャンバスの外にオブジェクトがあるなら絵画しない\n      return;\n    }\n\n    // コンテキストを取得\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n    // 絵画するタイルの縦横の番号を求める\n    const xIndex = this.index % (this.img.width / this.width);\n    const yIndex = Math.floor(this.index / (this.img.width / this.width));\n\n    // 絵画する\n    ctx.drawImage(\n      this.img,\n      this.width * xIndex,\n      this.height * yIndex,\n      this.width,\n      this.height,\n      this.x,\n      this.y,\n      this.width,\n      this.height,\n    );\n  }\n\n  eventHandler() {\n    /* オーバーライドする */\n  }\n}\n\nexport default Sprite;\n","import Sprite from './Sprite';\n\nexport default class Tile extends Sprite {\n  constructor(img, public size: number = 48) {\n    super(img, size, size);\n  }\n}\n","import Map from './Map';\nimport Sprite from './Sprite';\nimport Tile from './Tile';\n\nclass Scene {\n  objs: Array<Sprite | Map | Tile>;\n  /** そのシーンに入っているオブジェクト一覧 */\n\n  constructor() {\n    this.objs = [];\n  }\n\n  add(obj: Sprite | Map | Tile) {\n    this.objs = this.objs.concat([obj]);\n  }\n\n  update() {\n    this.eventHandler();\n  }\n\n  eventHandler() {\n    /**\n     * オーバーライドする\n     */\n  }\n}\n\nexport default Scene;\n","import Game from './modules/Game';\nimport Map from './modules/Map';\nimport Tile from './modules/Tile';\nimport Scene from './modules/Scene';\nimport './css/Style.scss';\nimport mapData from './data/map.json';\n\n// キーバインドをe.codeで定義\nconst codes = {\n  up: ['KeyW', 'Numpad8', 'ArrowUp'], // w,テンキー8,↑\n  down: ['KeyS', 'Numpad2', 'ArrowDown'], // s,テンキー2,↓\n  right: ['KeyD', 'Numpad6', 'ArrowRight'], // d,テンキー6,→\n  left: ['KeyA', 'Numpad4', 'ArrowLeft'], // a,テンキー4,←\n  confirm: ['Enter', 'KeyZ'], // Enter,z\n  discard: ['Escape', 'KeyX'], // Esc,x\n};\n\n// 移動速度の定義\nconst walkSpeed = 4;\n// const runSpeed = 8;\n\nconst floorData = mapData.floor;\nconst objectData = mapData.object;\n\nwindow.addEventListener('load', () => {\n  // 画面サイズの95%で初期化\n  const game = new Game(window.innerWidth * 0.95, window.innerHeight * 0.95);\n\n  // codesの全てのキーを呼び出し登録する\n  for (const i in codes) {\n    if (codes && Object.prototype.hasOwnProperty.call(codes, i)) {\n      game.setKeyBind(i, codes[i]);\n    }\n  }\n\n  // 画面サイズが変更されたらスクリーンサイズを変更\n  window.addEventListener('resize', () => {\n    game.resize(window.innerWidth * 0.95, window.innerHeight * 0.95);\n  });\n\n  // シーン生成\n  const scene = new Scene();\n\n  // タイルマップ生成\n  const floor = new Map('./img/school.png');\n  floor.data = floorData;\n  scene.add(floor);\n\n  const objects = new Map('./img/schoolD.png');\n  objects.data = objectData;\n  scene.add(objects);\n\n  // スプライト（タイル）生成・追加\n  const school = new Tile('./img/kanzaki1.png');\n\n  scene.add(school);\n\n  // イベントハンドラのオーバーライド\n  scene.eventHandler = () => {\n    if (game.keyMap.up.push) school.y -= walkSpeed;\n    if (game.keyMap.down.push) school.y += walkSpeed;\n    if (game.keyMap.right.push) school.x += walkSpeed;\n    if (game.keyMap.left.push) school.x -= walkSpeed;\n  };\n\n  game.add(scene);\n\n  // ゲームを開始する\n  game.start();\n});\n","// startup\n// Load entry module and return exports\n// This entry module doesn't tell about it's top-level declarations so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[833]();\n"],"names":["width","height","this","canvas","document","createElement","root","getElementById","appendChild","scenes","current","keyMap","resize","start","element","listener","target","mainloop","window","e","i","preventDefault","Object","prototype","hasOwnProperty","call","type","code","indexOf","push","split","forEach","event","addEventListener","ctx","getContext","fillStyle","fillRect","update","objs","length","requestAnimationFrame","bind","add","scene","concat","setKeyBind","name","codes","img","size","Image","src","x","y","data","render","j","xIndex","yIndex","Math","floor","drawImage","eventHandler","index","obj","up","down","right","left","confirm","discard","floorData","objectData","game","innerWidth","innerHeight","objects","school","__webpack_modules__"],"sourceRoot":""}