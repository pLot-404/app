{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://app/./src/modules/Game.ts","webpack://app/./src/modules/MultiEventListener.ts","webpack://app/./src/modules/Sprite.ts","webpack://app/./src/App.ts"],"sourcesContent":["import Sprite from './Sprite';\nimport MultiEventListener from './MultiEventListener';\n\n// keyMap用の型定義\ninterface key {\n  [index: string]: {\n    // 作用のエイリアス名\n    code: string[]; // 作用を起こすキーのe.code一覧\n    push: boolean; // キーのいずれかが押されているかの判定\n  };\n}\n\nclass Game {\n  /*\nゲームエンジン全体の制御\n\ncanvas : ゲームを表示するキャンバス\nobjs: ゲームで表示するスプライト一覧\nkeyMap: キーボードと動作の対応\n*/\n\n  public canvas: HTMLCanvasElement;\n  /* ゲームを表示するキャンバス */\n\n  public objs: Sprite[];\n  /* ゲームで表示するスプライト一覧 */\n\n  public keyMap: key;\n  /* キーボードと動作の対応 */\n\n  constructor(width = 320, height = 600) {\n    // キャンバスの生成とrootへの追加\n    this.canvas = document.createElement('canvas');\n    const root = document.getElementById('root');\n    if (root) root.appendChild(this.canvas);\n\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n\n    // スプライトの初期化\n    this.objs = [];\n\n    // キーマップの初期化\n    this.keyMap = {};\n  }\n\n  resize(width = 320, height = 600) {\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n  }\n\n  start() {\n    // メインループ\n    this.mainloop();\n\n    // キーが押される・離されるときにkeyMapのフラグを変化\n    MultiEventListener(window, 'keydown keyup', (e: KeyboardEvent): void => {\n      e.preventDefault();\n      for (const i in this.keyMap) {\n        if (this.keyMap && Object.prototype.hasOwnProperty.call(this.keyMap, i))\n          switch (e.type) {\n            case 'keydown':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = true;\n              }\n              break;\n            case 'keyup':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = false;\n              }\n              break;\n\n            default:\n              return;\n          }\n      }\n    });\n  }\n\n  mainloop() {\n    // コンテキストを取得して塗りつぶす\n    const ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.fillStyle = '#000';\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // すべてのオブジェクトを再絵画\n    for (let i = 0; i < this.objs.length; i++) {\n      this.objs[i].update(this.canvas);\n    }\n\n    // ループ\n    requestAnimationFrame(this.mainloop.bind(this));\n  }\n\n  add(obj: Sprite) {\n    // スプライトを追加\n    this.objs = this.objs.concat([obj]);\n  }\n\n  setKeyBind(name: string, codes: string[]) {\n    // キーマップを登録\n    this.keyMap[name] = {\n      code: codes,\n      push: false,\n    };\n  }\n}\n\nexport default Game;\n","const MultiEventListener = (\n  element: Element | null | Window,\n  eventNames: string,\n  listener: (e: KeyboardEvent) => void,\n): void => {\n  /*\n  elementに、半角スペースで区切られたeventNamesそれぞれに対し同じイベントリスナを登録する\n  */\n\n  const target = element as EventTarget;\n  const events = eventNames.split(' ');\n  events.forEach((event: string) => target.addEventListener(event, listener, false));\n};\n\nexport default MultiEventListener;\n","class Sprite {\n  img: HTMLImageElement;\n  /* 表示する画像 */\n\n  constructor(\n    img: string,\n    public x: number = 0, // 初期絵画位置x\n    public y: number = 0, // 初期絵画位置y\n    public width: number = 40, // 絵画サイズ幅\n    public height: number = 40, // 絵画サイズ高さ\n    public index: number = 0, // 左上から数えたタイルの番号\n  ) {\n    // 画像の初期化\n    this.img = new Image();\n    this.img.src = img;\n  }\n\n  update(canvas: HTMLCanvasElement) {\n    // レンダーを呼び出す\n    this.render(canvas);\n    // イベントハンドラを呼び出す\n    this.eventHandler();\n  }\n\n  render(canvas: HTMLCanvasElement) {\n    if (\n      this.x < -1 * this.width ||\n      this.x > canvas.width ||\n      this.y < -1 * this.height ||\n      this.y > canvas.height\n    ) {\n      // キャンバスの外にオブジェクトがあるなら絵画しない\n      return;\n    }\n\n    // コンテキストを取得\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n    // 絵画するタイルの縦横の番号を求める\n    const xIndex = this.index % (this.img.width / this.width);\n    const yIndex = Math.floor(this.index / (this.img.width / this.width));\n\n    // 絵画する\n    ctx.drawImage(\n      this.img,\n      this.width * xIndex,\n      this.height * yIndex,\n      this.width,\n      this.height,\n      this.x,\n      this.y,\n      this.width,\n      this.height,\n    );\n  }\n\n  eventHandler() {\n    /* オーバーライドする */\n  }\n}\n\nexport default Sprite;\n","import Game from './modules/Game';\nimport Sprite from './modules/Sprite';\nimport './css/Style.scss';\n\n// キーバインドをe.codeで定義\nconst codes = {\n  up: ['KeyW', 'Numpad8', 'ArrowUp'], // w,テンキー8,↑\n  down: ['KeyS', 'Numpad2', 'ArrowDown'], // s,テンキー2,↓\n  right: ['KeyD', 'Numpad6', 'ArrowRight'], // d,テンキー6,→\n  left: ['KeyA', 'Numpad4', 'ArrowLeft'], // a,テンキー4,←\n  confirm: ['Enter', 'KeyZ'], // Enter,z\n  discard: ['Escape', 'KeyX'], // Esc,x\n};\n\nwindow.addEventListener('load', () => {\n  // 画面サイズの95%で初期化\n  const game = new Game(window.innerWidth * 0.95, window.innerHeight * 0.95);\n\n  // codesの全てのキーを呼び出し登録する\n  for (const i in codes) {\n    if (codes && Object.prototype.hasOwnProperty.call(codes, i)) {\n      game.setKeyBind(i, codes[i]);\n    }\n  }\n\n  // 画面サイズが変更されたらスクリーンサイズを変更\n  window.addEventListener('resize', () => {\n    game.resize(window.innerWidth * 0.95, window.innerHeight * 0.95);\n  });\n\n  // スプライト生成・追加\n  const school = new Sprite('./img/schoolinside.png', 0, 0, 40, 40, 1);\n\n  // イベントハンドラのオーバーライド\n  school.eventHandler = () => {\n    if (game.keyMap.up.push) school.y -= 4;\n    if (game.keyMap.down.push) school.y += 4;\n    if (game.keyMap.right.push) school.x += 4;\n    if (game.keyMap.left.push) school.x -= 4;\n  };\n\n  game.add(school);\n\n  // ゲームを開始する\n  game.start();\n});\n"],"names":["width","height","this","canvas","document","createElement","root","getElementById","appendChild","objs","keyMap","resize","start","element","listener","target","mainloop","window","e","i","preventDefault","Object","prototype","hasOwnProperty","call","type","code","indexOf","push","split","forEach","event","addEventListener","ctx","getContext","fillStyle","fillRect","length","update","requestAnimationFrame","bind","add","obj","concat","setKeyBind","name","codes","img","x","y","index","Image","src","render","eventHandler","xIndex","yIndex","Math","floor","drawImage","up","down","right","left","confirm","discard","game","innerWidth","innerHeight","school"],"sourceRoot":""}