{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://app/./src/modules/Game.ts","webpack://app/./src/modules/MultiEventListener.ts","webpack://app/./src/modules/Map.ts","webpack://app/./src/modules/Sprite.ts","webpack://app/./src/modules/Tile.ts","webpack://app/./src/modules/Scene.ts","webpack://app/./src/App.ts","webpack://app/webpack/startup"],"sourcesContent":["import Scene from './Scene';\nimport MultiEventListener from './MultiEventListener';\n\n// keyMap用の型定義\ninterface key {\n  [index: string]: {\n    // 作用のエイリアス名\n    code: string[]; // 作用を起こすキーのe.code一覧\n    push: boolean; // キーのいずれかが押されているかの判定\n  };\n}\n/**\n  ゲームエンジン全体の制御\n  */\nclass Game {\n  /** ゲームを表示するキャンバス */\n  public canvas: HTMLCanvasElement;\n\n  /** キーボードと動作の対応 */\n  public keyMap: key;\n\n  /** ゲームに登場するシーンの一覧 */\n  public scenes: Scene[];\n\n  /** 現在のシーン */\n  public current: Scene | null;\n\n  /** シフトキーのフラグ */\n  public shift: boolean;\n\n  constructor(width = 320, height = 600) {\n    // キャンバスの生成とrootへの追加\n    this.canvas = document.createElement('canvas');\n    const root = document.getElementById('root');\n    if (root) root.appendChild(this.canvas);\n\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n\n    // シーンの初期化\n    this.scenes = [];\n    this.current = null;\n\n    // キーマップの初期化\n    this.keyMap = {};\n    this.shift = false;\n  }\n\n  resize(width = 320, height = 600) {\n    // 大きさを設定\n    [this.canvas.width, this.canvas.height] = [width, height];\n  }\n\n  start() {\n    this.current = this.current || this.scenes[0] || null;\n\n    // メインループ\n    this.mainloop();\n\n    // キーが押される・離されるときにkeyMapのフラグを変化\n    MultiEventListener(window, 'keydown keyup', (e: KeyboardEvent): void => {\n      e.preventDefault();\n      if (e.shiftKey) {\n        this.shift = true;\n      } else {\n        this.shift = false;\n      }\n      for (const i in this.keyMap) {\n        if (this.keyMap && Object.prototype.hasOwnProperty.call(this.keyMap, i))\n          switch (e.type) {\n            case 'keydown':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = true;\n              }\n              break;\n            case 'keyup':\n              if (this.keyMap[i].code.indexOf(e.code) !== -1) {\n                this.keyMap[i].push = false;\n              }\n              break;\n\n            default:\n              return;\n          }\n      }\n    });\n  }\n\n  mainloop() {\n    // コンテキストを取得して塗りつぶす\n    const ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.fillStyle = '#000';\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.current.update();\n\n    // 現シーンのすべてのオブジェクトを再絵画\n    for (let i = 0; i < this.current.objs.length; i++) {\n      this.current.objs[i].update(this.canvas);\n    }\n\n    // ループ\n    requestAnimationFrame(this.mainloop.bind(this));\n  }\n\n  add(scene: Scene) {\n    // シーンを追加\n    this.scenes = this.scenes.concat([scene]);\n  }\n\n  setKeyBind(name: string, codes: string[]) {\n    // キーマップを登録\n    this.keyMap[name] = {\n      code: codes,\n      push: false,\n    };\n  }\n}\n\nexport default Game;\n","const MultiEventListener = (\n  element: Element | null | Window,\n  eventNames: string,\n  listener: (e: KeyboardEvent) => void,\n): void => {\n  /*\n  elementに、半角スペースで区切られたeventNamesそれぞれに対し同じイベントリスナを登録する\n  */\n\n  const target = element as EventTarget;\n  const events = eventNames.split(' ');\n  events.forEach((event: string) => target.addEventListener(event, listener, false));\n};\n\nexport default MultiEventListener;\n","import Tile from './Tile';\n\nexport default class Map {\n  img: HTMLImageElement;\n  /** 絵画する画像 */\n\n  altImg: HTMLImageElement | null;\n  /** 代わりの画像 */\n\n  x: number;\n  /** 画像の座標 */\n\n  y: number;\n  /** 画像の座標 */\n\n  data: number[][];\n  /** マップデータの二次元配列 */\n\n  tiles: Tile[];\n  /** マップ上のタイル */\n\n  xSpeed: number;\n  /** 横方向の速度 */\n\n  ySpeed: number;\n  /** 縦方向の速度 */\n\n  constructor(img: string, altImg?: string, public size: number = 48) {\n    this.img = new Image();\n    this.img.src = img;\n\n    if (altImg) {\n      this.altImg = new Image();\n      this.altImg.src = altImg;\n    }\n\n    [this.x, this.y, this.xSpeed, this.ySpeed] = [0, 0, 0, 0];\n\n    this.data = [];\n    this.tiles = [];\n  }\n\n  update(canvas: HTMLCanvasElement) {\n    this.render(canvas);\n\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n\n    for (let i = 0; i < this.tiles.length; i++) {\n      if (this.tiles[i].sync) this.tiles[i].shift = { x: this.x, y: this.y };\n      this.tiles[i].update(canvas);\n    }\n  }\n\n  render(canvas: HTMLCanvasElement) {\n    for (let i = 0; i < this.data.length; i++) {\n      // タイルの絵画位置\n      const y = this.y + this.size * i;\n      // タイルの位置が画面の外なら飛ばす\n      if (y < -1 * this.size || y > canvas.height) continue;\n\n      for (let j = 0; j < this.data[i].length; j++) {\n        const x = this.x + this.size * j;\n        if (x < -1 * this.size || x > canvas.width) continue;\n\n        const xIndex = this.data[i][j] % (this.img.width / this.size);\n        const yIndex = Math.floor(this.data[i][j] / (this.img.width / this.size));\n\n        const ctx = canvas.getContext('2d');\n\n        ctx.drawImage(\n          this.img,\n          this.size * xIndex,\n          this.size * yIndex,\n          this.size,\n          this.size,\n          x,\n          y,\n          this.size,\n          this.size,\n        );\n\n        if (this.altImg) {\n          if (this.size * xIndex > this.img.width || this.size * yIndex > this.img.height) {\n            ctx.drawImage(\n              this.altImg,\n              this.size * xIndex,\n              this.size * yIndex,\n              this.size,\n              this.size,\n              x,\n              y,\n              this.size,\n              this.size,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  add(tile: Tile) {\n    this.tiles = this.tiles.concat([tile]);\n  }\n\n  eventHandler() {\n    /**\n     * オーバーライドする\n     */\n  }\n}\n","class Sprite {\n  /** 表示する画像 */\n  img: HTMLImageElement;\n\n  /** 横方向の速度 */\n  xSpeed: number;\n\n  /** 縦方向の速度 */\n  ySpeed: number;\n\n  /** スプライトをずらす */\n  shift: {\n    x: number;\n    y: number;\n  };\n\n  constructor(\n    img: string,\n    public width: number = 48, // 絵画サイズ幅\n    public height: number = 48, // 絵画サイズ高さ\n    public index: number = 0, // 左上から数えたタイルの番号\n    public x: number = 0, // 初期絵画位置x\n    public y: number = 0, // 初期絵画位置y\n  ) {\n    // 画像の初期化\n    this.img = new Image();\n    this.img.src = img;\n\n    [this.xSpeed, this.ySpeed] = [0, 0];\n    this.shift = { x: 0, y: 0 };\n  }\n\n  update(canvas: HTMLCanvasElement) {\n    // レンダーを呼び出す\n    this.render(canvas);\n    // イベントハンドラを呼び出す\n    this.eventHandler();\n\n    // 移動する\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n  }\n\n  render(canvas: HTMLCanvasElement) {\n    if (\n      this.x + this.shift.x < -1 * this.width ||\n      this.x + this.shift.x > canvas.width ||\n      this.y + this.shift.y < -1 * this.height ||\n      this.y + this.shift.y > canvas.height\n    ) {\n      // キャンバスの外にオブジェクトがあるなら絵画しない\n      return;\n    }\n\n    // コンテキストを取得\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n    // 絵画するタイルの縦横の番号を求める\n    const xIndex = this.index % (this.img.width / this.width);\n    const yIndex = Math.floor(this.index / (this.img.width / this.width));\n\n    // 絵画する\n    ctx.drawImage(\n      this.img,\n      this.width * xIndex,\n      this.height * yIndex,\n      this.width,\n      this.height,\n      this.x + this.shift.x,\n      this.y + this.shift.y,\n      this.width,\n      this.height,\n    );\n  }\n\n  eventHandler() {\n    /* オーバーライドする */\n  }\n}\n\nexport default Sprite;\n","import Sprite from './Sprite';\n\nexport default class Tile extends Sprite {\n  /** マップと同期して動かすフラグ */\n  sync: boolean;\n\n  constructor(img: string, public size: number = 48, public index: number = 0) {\n    super(img, size, size, index);\n\n    this.sync = true;\n  }\n}\n","import Map from './Map';\nimport Sprite from './Sprite';\nimport Tile from './Tile';\n\nclass Scene {\n  objs: Array<Sprite | Map | Tile>;\n  /** そのシーンに入っているオブジェクト一覧 */\n\n  constructor() {\n    this.objs = [];\n  }\n\n  add(obj: Sprite | Map | Tile) {\n    this.objs = this.objs.concat([obj]);\n  }\n\n  update() {\n    this.eventHandler();\n  }\n\n  eventHandler() {\n    /**\n     * オーバーライドする\n     */\n  }\n}\n\nexport default Scene;\n","import Game from './modules/Game';\nimport Map from './modules/Map';\nimport Tile from './modules/Tile';\nimport Scene from './modules/Scene';\nimport './css/Style.scss';\nimport mapData from './data/map.json';\n\n// キーバインドをe.codeで定義\nconst codes = {\n  up: ['KeyW', 'Numpad8', 'ArrowUp'], // w,テンキー8,↑\n  down: ['KeyS', 'Numpad2', 'ArrowDown'], // s,テンキー2,↓\n  right: ['KeyD', 'Numpad6', 'ArrowRight'], // d,テンキー6,→\n  left: ['KeyA', 'Numpad4', 'ArrowLeft'], // a,テンキー4,←\n  confirm: ['Enter', 'KeyZ'], // Enter,z\n  discard: ['Escape', 'KeyX'], // Esc,x\n};\n\n// タイルサイズの定義\nconst tileSize = 48;\n\n// 移動速度の定義\nconst walkSpeed = 6;\nconst runSpeed = 16;\n\nconst floorData = mapData.floor;\nconst objectData = mapData.object;\n\nwindow.addEventListener('load', () => {\n  // 画面サイズの95%で初期化\n  const game = new Game(window.innerWidth * 0.95, window.innerHeight * 0.95);\n\n  // codesの全てのキーを呼び出し登録する\n  for (const i in codes) {\n    if (codes && Object.prototype.hasOwnProperty.call(codes, i)) {\n      game.setKeyBind(i, codes[i]);\n    }\n  }\n\n  // 画面サイズが変更されたらスクリーンサイズを変更\n  window.addEventListener('resize', () => {\n    game.resize(window.innerWidth * 0.95, window.innerHeight * 0.95);\n  });\n\n  // シーン生成\n  const scene = new Scene();\n\n  // タイルマップ生成\n  const floor = new Map('./img/school.png');\n  floor.data = floorData;\n  floor.x = tileSize * (Math.floor(game.canvas.width / tileSize) / 2 - 1) - tileSize / 2;\n  floor.y = tileSize * (Math.floor(game.canvas.height / tileSize) / 2 - 2) - tileSize / 2;\n  scene.add(floor);\n\n  const objects = new Map('./img/schoolD.png', './img/school.png');\n  objects.data = objectData;\n  objects.x = tileSize * (Math.floor(game.canvas.width / tileSize) / 2 - 1) - tileSize / 2;\n  objects.y = tileSize * (Math.floor(game.canvas.height / tileSize) / 2 - 2) - tileSize / 2;\n  scene.add(objects);\n\n  // スプライト（タイル）生成・追加\n  const to16 = new Tile('./img/school.png', 48, 448); // 透明タイル\n  [to16.x, to16.y] = [tileSize * 103, tileSize * 17];\n  objects.add(to16);\n\n  const kanzaki = new Tile('./img/kanzaki1.png');\n  [kanzaki.x, kanzaki.y] = [\n    (tileSize * Math.floor(game.canvas.width / tileSize)) / 2 - tileSize / 2,\n    (tileSize * Math.floor(game.canvas.height / tileSize)) / 2 - tileSize / 2,\n  ];\n  kanzaki.sync = false;\n\n  objects.add(kanzaki);\n\n  // イベントハンドラのオーバーライド\n  scene.eventHandler = () => {\n    if (\n      (objects.x - tileSize / 2) % tileSize === 0 &&\n      (objects.y - tileSize / 2) % tileSize === 0\n    ) {\n      [floor.xSpeed, floor.ySpeed, objects.xSpeed, objects.ySpeed] = [0, 0, 0, 0];\n      // マップの移動（シフトキーが押されていたら走る）\n      if (game.keyMap.up.push) {\n        floor.ySpeed += game.shift ? runSpeed : walkSpeed;\n        objects.ySpeed += game.shift ? runSpeed : walkSpeed;\n      }\n      if (game.keyMap.down.push) {\n        floor.ySpeed -= game.shift ? runSpeed : walkSpeed;\n        objects.ySpeed -= game.shift ? runSpeed : walkSpeed;\n      }\n      if (game.keyMap.right.push) {\n        floor.xSpeed -= game.shift ? runSpeed : walkSpeed;\n        objects.xSpeed -= game.shift ? runSpeed : walkSpeed;\n      }\n      if (game.keyMap.left.push) {\n        floor.xSpeed += game.shift ? runSpeed : walkSpeed;\n        objects.xSpeed += game.shift ? runSpeed : walkSpeed;\n      }\n    }\n  };\n\n  game.add(scene);\n\n  // ゲームを開始する\n  game.start();\n});\n","// startup\n// Load entry module and return exports\n// This entry module doesn't tell about it's top-level declarations so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[833]();\n"],"names":["width","height","this","canvas","document","createElement","root","getElementById","appendChild","scenes","current","keyMap","shift","resize","start","element","listener","target","mainloop","window","e","i","preventDefault","shiftKey","Object","prototype","hasOwnProperty","call","type","code","indexOf","push","split","forEach","event","addEventListener","ctx","getContext","fillStyle","fillRect","update","objs","length","requestAnimationFrame","bind","add","scene","concat","setKeyBind","name","codes","img","altImg","size","Image","src","x","y","xSpeed","ySpeed","data","tiles","render","sync","j","xIndex","yIndex","Math","floor","drawImage","tile","eventHandler","index","obj","up","down","right","left","confirm","discard","tileSize","runSpeed","floorData","objectData","game","innerWidth","innerHeight","objects","to16","kanzaki","__webpack_modules__"],"sourceRoot":""}